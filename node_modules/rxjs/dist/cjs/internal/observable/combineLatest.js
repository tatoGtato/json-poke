"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.combineLatestInit = exports.combineLatest = void 0;
const Observable_1 = require("../Observable");
const argsArgArrayOrObject_1 = require("../util/argsArgArrayOrObject");
const Subscriber_1 = require("../Subscriber");
const identity_1 = require("../util/identity");
const createObject_1 = require("../util/createObject");
const empty_1 = require("./empty");
const from_1 = require("./from");
function combineLatest(sources, resultSelector) {
    const parts = (0, argsArgArrayOrObject_1.arrayOrObject)(sources);
    if (!parts) {
        throw new TypeError('sources must be an array or object');
    }
    const { args: observables, keys } = parts;
    if (observables.length === 0) {
        return empty_1.EMPTY;
    }
    return new Observable_1.Observable(combineLatestInit(observables, keys
        ? (values) => (0, createObject_1.createObject)(keys, values)
        : resultSelector
            ? (values) => resultSelector(...values)
            : identity_1.identity));
}
exports.combineLatest = combineLatest;
function combineLatestInit(observables, valueTransform = identity_1.identity) {
    return (destination) => {
        const { length } = observables;
        const values = new Array(length);
        let active = length;
        let remainingFirstValues = length;
        for (let i = 0; i < length; i++) {
            const source = (0, from_1.from)(observables[i]);
            let hasFirstValue = false;
            source.subscribe((0, Subscriber_1.operate)({
                destination,
                next: (value) => {
                    values[i] = value;
                    if (!hasFirstValue) {
                        hasFirstValue = true;
                        remainingFirstValues--;
                    }
                    if (!remainingFirstValues) {
                        destination.next(valueTransform(Array.from(values)));
                    }
                },
                complete: () => {
                    if (!--active) {
                        destination.complete();
                    }
                },
            }));
        }
    };
}
exports.combineLatestInit = combineLatestInit;
//# sourceMappingURL=combineLatest.js.map