"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.distinctUntilChanged = void 0;
const identity_1 = require("../util/identity");
const Observable_1 = require("../Observable");
const Subscriber_1 = require("../Subscriber");
function distinctUntilChanged(comparator, keySelector = identity_1.identity) {
    comparator = comparator ?? defaultCompare;
    return (source) => new Observable_1.Observable((destination) => {
        let previousKey;
        let first = true;
        source.subscribe((0, Subscriber_1.operate)({
            destination,
            next: (value) => {
                const currentKey = keySelector(value);
                if (first || !comparator(previousKey, currentKey)) {
                    first = false;
                    previousKey = currentKey;
                    destination.next(value);
                }
            },
        }));
    });
}
exports.distinctUntilChanged = distinctUntilChanged;
function defaultCompare(a, b) {
    return a === b;
}
//# sourceMappingURL=distinctUntilChanged.js.map